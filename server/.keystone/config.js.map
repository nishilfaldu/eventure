{
  "version": 3,
  "sources": ["../keystone.ts", "../src/index.ts", "../src/auth.ts", "../src/schema/User.ts", "../src/schema/index.ts"],
  "sourcesContent": ["import { keystoneConfig } from \"./src\";\n\n\n\nexport default keystoneConfig;\n", "// Welcome to Keystone!\n//\n// This file is what Keystone uses as the entry-point to your headless backend\n//\n// Keystone imports the default export of this file, expecting a Keystone configuration object\n//   you can find out more at https://keystonejs.com/docs/apis/config\n// to keep this file tidy, we define our schema in a different file\nimport { config } from \"@keystone-6/core\";\n// to keep this file tidy, we define our schema in a different file\n\nimport { session } from \"./auth\";\n// import { extendExpressApp } from \"./express-app\";\nimport { lists } from \"./schema\";\n// import { extendGraphqlSchema } from \"./schema/extendGraphqlSchema\";\n\n// authentication is configured separately here too, but you might move this elsewhere\n// when you write your list-level access control functions, as they typically rely on session data\n// dotenv.config();\n// eslint-disable-next-line max-len\nconst dbUrl = process.env.POSTGRES_URL_WITH_LOCALHOST || `postgresql://${process.env.POSTGRES_USER}:${process.env.POSTGRES_PASSWORD}@${process.env.APP_NAME}-database-development:5432/${process.env.POSTGRES_DB}`;\n\nexport const keystoneConfig = config({\n    db: {\n        provider: \"postgresql\",\n        url: dbUrl,\n        enableLogging: true,\n        idField: { kind: \"cuid\" },\n    },\n    lists,\n    //   extendGraphqlSchema,\n    server: {\n        // extendExpressApp,\n        port: parseInt(process.env.SERVER_PORT ?? \"\") || 3001,\n    },\n    session,\n    ui: {\n        isAccessAllowed: () => true, //TODO, https://keystonejs.com/docs/walkthroughs/lesson-4#adding-init-first-item\n    },\n});\n", "// Welcome to some authentication for Keystone\n//\n// This is using @keystone-6/auth to add the following\n// - A sign-in page for your Admin UI\n// - A cookie-based stateless session strategy\n//    - Using a User email as the identifier\n//    - 30 day cookie expiration\n//\n// This file does not configure what Users can do, and the default for this starter\n// project is to allow anyone - logged-in or not - to do anything.\n//\n// If you want to prevent random people on the internet from accessing your data,\n// you can find out how by reading https://keystonejs.com/docs/guides/auth-and-access-control\n//\n// If you want to learn more about how our out-of-the-box authentication works, please\n// read https://keystonejs.com/docs/apis/auth#authentication-api\n\nimport { randomBytes } from \"crypto\";\n\nimport { createAuth } from \"@keystone-6/auth\";\n// see https://keystonejs.com/docs/apis/session for the session docs\nimport { statelessSessions } from \"@keystone-6/core/session\";\n\n// for a stateless session, a SESSION_SECRET should always be provided\n//   especially in production (statelessSessions will throw if SESSION_SECRET is undefined)\nlet sessionSecret = process.env.SESSION_SECRET;\nif (!sessionSecret && process.env.NODE_ENV !== \"production\") {\n    sessionSecret = randomBytes(32).toString(\"hex\");\n}\n\n// withAuth is a function we can use to wrap our base configuration\nconst { withAuth } = createAuth({\n    listKey: \"User\",\n    identityField: \"email\",\n\n    // this is a GraphQL query fragment for fetching what data will be attached to a context.session\n    //   this can be helpful for when you are writing your access control functions\n    //   you can find out more at https://keystonejs.com/docs/guides/auth-and-access-control\n    sessionData: \"name createdAt\",\n    secretField: \"password\",\n\n    // WARNING: remove initFirstItem functionality in production\n    //   see https://keystonejs.com/docs/config/auth#init-first-item for more\n    initFirstItem: {\n    // if there are no items in the database, by configuring this field\n    //   you are asking the Keystone AdminUI to create a new user\n    //   providing inputs for these fields\n        fields: [\"name\", \"email\", \"password\"],\n\n    // it uses context.sudo() to do this, which bypasses any access control you might have\n    //   you shouldn't use this in production\n    },\n});\n\n// statelessSessions uses cookies for session tracking\n//   these cookies have an expiry, in seconds\n//   we use an expiry of 30 days for this starter\nconst sessionMaxAge = 60 * 60 * 24 * 30;\n\n// you can find out more at https://keystonejs.com/docs/apis/session#session-api\nconst session = statelessSessions({\n    maxAge: sessionMaxAge,\n    secret: sessionSecret!,\n});\n\nexport { withAuth, session };\n", "import { list } from \"@keystone-6/core\";\nimport { allowAll } from \"@keystone-6/core/access\";\nimport { text } from \"@keystone-6/core/fields\";\n\n\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const User = list({\n    access: allowAll,\n    fields: {\n        firstName: text({\n            validation: { isRequired: false },\n            db: { isNullable: true },\n        }),\n        lastName: text({\n            validation: { isRequired: false },\n            db: { isNullable: true },\n        }),\n        email: text({\n            validation: { isRequired: true },\n            db: { isNullable: false },\n            isIndexed: \"unique\",\n        }),\n        country: text({\n            validation: { isRequired: false },\n            db: { isNullable: false },\n        }),\n        phoneNumber: text({\n            db: { isNullable: false },\n            validation: { isRequired: true },\n        }),\n        // ssoId: text({\n        //     validation: { isRequired: false },\n        //     isIndexed: \"unique\",\n        // }),\n        // // \"checkbox\" is keystone's weird way of saying \"boolean field\"\n        // admin: checkbox({\n        //     defaultValue: false,\n        // }),\n        // events: relationship({\n        //     ref: \"Event\",\n        // }),\n    },\n});\n", "import type { Lists } from \".keystone/types\";\n\nimport { User } from \"./User\";\n\n\n\nexport const lists = {\n    User,\n} as Lists;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACOA,IAAAA,eAAuB;;;ACUvB,oBAA4B;AAE5B,kBAA2B;AAE3B,qBAAkC;AAIlC,IAAI,gBAAgB,QAAQ,IAAI;AAChC,IAAI,CAAC,iBAAiB,QAAQ,IAAI,aAAa,cAAc;AACzD,sBAAgB,2BAAY,EAAE,EAAE,SAAS,KAAK;AAClD;AAGA,IAAM,EAAE,SAAS,QAAI,wBAAW;AAAA,EAC5B,SAAS;AAAA,EACT,eAAe;AAAA;AAAA;AAAA;AAAA,EAKf,aAAa;AAAA,EACb,aAAa;AAAA;AAAA;AAAA,EAIb,eAAe;AAAA;AAAA;AAAA;AAAA,IAIX,QAAQ,CAAC,QAAQ,SAAS,UAAU;AAAA;AAAA;AAAA,EAIxC;AACJ,CAAC;AAKD,IAAM,gBAAgB,KAAK,KAAK,KAAK;AAGrC,IAAM,cAAU,kCAAkB;AAAA,EAC9B,QAAQ;AAAA,EACR,QAAQ;AACZ,CAAC;;;AC/DD,kBAAqB;AACrB,oBAAyB;AACzB,oBAAqB;AAKd,IAAM,WAAO,kBAAK;AAAA,EACrB,QAAQ;AAAA,EACR,QAAQ;AAAA,IACJ,eAAW,oBAAK;AAAA,MACZ,YAAY,EAAE,YAAY,MAAM;AAAA,MAChC,IAAI,EAAE,YAAY,KAAK;AAAA,IAC3B,CAAC;AAAA,IACD,cAAU,oBAAK;AAAA,MACX,YAAY,EAAE,YAAY,MAAM;AAAA,MAChC,IAAI,EAAE,YAAY,KAAK;AAAA,IAC3B,CAAC;AAAA,IACD,WAAO,oBAAK;AAAA,MACR,YAAY,EAAE,YAAY,KAAK;AAAA,MAC/B,IAAI,EAAE,YAAY,MAAM;AAAA,MACxB,WAAW;AAAA,IACf,CAAC;AAAA,IACD,aAAS,oBAAK;AAAA,MACV,YAAY,EAAE,YAAY,MAAM;AAAA,MAChC,IAAI,EAAE,YAAY,MAAM;AAAA,IAC5B,CAAC;AAAA,IACD,iBAAa,oBAAK;AAAA,MACd,IAAI,EAAE,YAAY,MAAM;AAAA,MACxB,YAAY,EAAE,YAAY,KAAK;AAAA,IACnC,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYL;AACJ,CAAC;;;ACrCM,IAAM,QAAQ;AAAA,EACjB;AACJ;;;AHWA,IAAM,QAAQ,QAAQ,IAAI,+BAA+B,gBAAgB,QAAQ,IAAI,aAAa,IAAI,QAAQ,IAAI,iBAAiB,IAAI,QAAQ,IAAI,QAAQ,8BAA8B,QAAQ,IAAI,WAAW;AAEzM,IAAM,qBAAiB,qBAAO;AAAA,EACjC,IAAI;AAAA,IACA,UAAU;AAAA,IACV,KAAK;AAAA,IACL,eAAe;AAAA,IACf,SAAS,EAAE,MAAM,OAAO;AAAA,EAC5B;AAAA,EACA;AAAA;AAAA,EAEA,QAAQ;AAAA;AAAA,IAEJ,MAAM,SAAS,QAAQ,IAAI,eAAe,EAAE,KAAK;AAAA,EACrD;AAAA,EACA;AAAA,EACA,IAAI;AAAA,IACA,iBAAiB,MAAM;AAAA;AAAA,EAC3B;AACJ,CAAC;;;ADlCD,IAAO,mBAAQ;",
  "names": ["import_core"]
}

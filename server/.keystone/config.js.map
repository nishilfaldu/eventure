{
  "version": 3,
  "sources": ["../keystone.ts", "../src/index.ts", "../src/auth.ts", "../src/express-app/api/index.ts", "../src/express-app/api/user.ts", "../src/express-app/utils.ts", "../src/express-app/index.ts", "../src/schema/index.ts"],
  "sourcesContent": ["import { keystoneConfig } from \"./src\";\n\n\n\nexport default keystoneConfig;\n", "// Welcome to Keystone!\n//\n// This file is what Keystone uses as the entry-point to your headless backend\n//\n// Keystone imports the default export of this file, expecting a Keystone configuration object\n//   you can find out more at https://keystonejs.com/docs/apis/config\n// to keep this file tidy, we define our schema in a different file\nimport { config } from \"@keystone-6/core\";\n// to keep this file tidy, we define our schema in a different file\n\nimport { session } from \"./auth\";\nimport { extendExpressApp } from \"./express-app\";\nimport { lists } from \"./schema\";\n// import { extendGraphqlSchema } from \"./schema/extendGraphqlSchema\";\n\n// authentication is configured separately here too, but you might move this elsewhere\n// when you write your list-level access control functions, as they typically rely on session data\n// dotenv.config();\n// eslint-disable-next-line max-len\nconst dbUrl = process.env.POSTGRES_URL_WITH_LOCALHOST || `postgresql://${process.env.POSTGRES_USER}:${process.env.POSTGRES_PASSWORD}@${process.env.APP_NAME}-database-development:5432/${process.env.POSTGRES_DB}`;\n\nexport const keystoneConfig = config({\n    db: {\n        provider: \"postgresql\",\n        url: dbUrl,\n        enableLogging: true,\n        idField: { kind: \"cuid\" },\n    },\n    lists,\n    //   extendGraphqlSchema,\n    server: {\n        extendExpressApp,\n        port: parseInt(process.env.SERVER_PORT ?? \"\") || 3001,\n    },\n    session,\n    ui: {\n        isAccessAllowed: () => true, //TODO, https://keystonejs.com/docs/walkthroughs/lesson-4#adding-init-first-item\n    },\n});\n", "// Welcome to some authentication for Keystone\n//\n// This is using @keystone-6/auth to add the following\n// - A sign-in page for your Admin UI\n// - A cookie-based stateless session strategy\n//    - Using a User email as the identifier\n//    - 30 day cookie expiration\n//\n// This file does not configure what Users can do, and the default for this starter\n// project is to allow anyone - logged-in or not - to do anything.\n//\n// If you want to prevent random people on the internet from accessing your data,\n// you can find out how by reading https://keystonejs.com/docs/guides/auth-and-access-control\n//\n// If you want to learn more about how our out-of-the-box authentication works, please\n// read https://keystonejs.com/docs/apis/auth#authentication-api\n\nimport { randomBytes } from \"crypto\";\n\nimport { createAuth } from \"@keystone-6/auth\";\n// see https://keystonejs.com/docs/apis/session for the session docs\nimport { statelessSessions } from \"@keystone-6/core/session\";\n\n// for a stateless session, a SESSION_SECRET should always be provided\n//   especially in production (statelessSessions will throw if SESSION_SECRET is undefined)\nlet sessionSecret = process.env.SESSION_SECRET;\nif (!sessionSecret && process.env.NODE_ENV !== \"production\") {\n    sessionSecret = randomBytes(32).toString(\"hex\");\n}\n\n// withAuth is a function we can use to wrap our base configuration\nconst { withAuth } = createAuth({\n    listKey: \"User\",\n    identityField: \"email\",\n\n    // this is a GraphQL query fragment for fetching what data will be attached to a context.session\n    //   this can be helpful for when you are writing your access control functions\n    //   you can find out more at https://keystonejs.com/docs/guides/auth-and-access-control\n    sessionData: \"name createdAt\",\n    secretField: \"password\",\n\n    // WARNING: remove initFirstItem functionality in production\n    //   see https://keystonejs.com/docs/config/auth#init-first-item for more\n    initFirstItem: {\n    // if there are no items in the database, by configuring this field\n    //   you are asking the Keystone AdminUI to create a new user\n    //   providing inputs for these fields\n        fields: [\"name\", \"email\", \"password\"],\n\n    // it uses context.sudo() to do this, which bypasses any access control you might have\n    //   you shouldn't use this in production\n    },\n});\n\n// statelessSessions uses cookies for session tracking\n//   these cookies have an expiry, in seconds\n//   we use an expiry of 30 days for this starter\nconst sessionMaxAge = 60 * 60 * 24 * 30;\n\n// you can find out more at https://keystonejs.com/docs/apis/session#session-api\nconst session = statelessSessions({\n    maxAge: sessionMaxAge,\n    secret: sessionSecret!,\n});\n\nexport { withAuth, session };\n", "import { Router } from \"express\";\n\nimport { userRouter } from \"./user\";\n\n\n\nconst apiRouter = Router();\n\napiRouter.use(\"/\", userRouter);\n\nexport { apiRouter };\n", "import bodyParser from \"body-parser\";\nimport { Router } from \"express\";\nimport { Webhook } from \"svix\";\n\n\n\nconst userRouter = Router();\n\nuserRouter.post(\"/webhook\", bodyParser.raw({ type: \"application/json\" }), async function(req, res) {\n    try {\n        const payloadString = req.body.toString();\n        const svixHeaders = req.headers;\n\n        if (!process.env.CLERK_WEBHOOK_SECRET_KEY) {\n            res.status(400).json({\n                success: false,\n                message: \"Clerk Webhook Secret Key not found\",\n            });\n\n            return;\n        }\n        const wh = new Webhook(process.env.CLERK_WEBHOOK_SECRET_KEY);\n        const evt = wh.verify(payloadString, svixHeaders);\n        const { id } = evt.data;\n        // Handle the webhook\n        const eventType = evt.type;\n        if (eventType === \"user.created\") {\n            console.log(`User ${id} was ${eventType}`);\n        }\n        res.status(200).json({\n            success: true,\n            message: \"Webhook received\",\n        });\n    } catch (err) {\n        res.status(400).json({\n            success: false,\n            message: err.message,\n        });\n    }\n});\n\nexport { userRouter };\n", "import type { Context } from \".keystone/types\";\nimport type { RequestHandler } from \"express\";\n\n\n\nexport function makeContextMiddleware(context: Context) {\n    const middleware: RequestHandler = async (req, _, next) => {\n        req.context = await context.withRequest(req);\n        next();\n    };\n\n    return middleware as RequestHandler;\n}\n", "import type { Context } from \".keystone/types\";\nimport type { Express } from \"express\";\n\nimport { apiRouter } from \"./api\";\nimport { makeContextMiddleware } from \"./utils\";\n\n\n\n\nexport function extendExpressApp(app: Express, context: Context) {\n    app.use(makeContextMiddleware(context));\n\n    app.use(\"/api\", apiRouter);\n}\n", "import type { Lists } from \".keystone/types\";\nimport { list } from \"@keystone-6/core\";\nimport { allowAll } from \"@keystone-6/core/access\";\nimport {\n    text,\n    checkbox,\n} from \"@keystone-6/core/fields\";\n\n\n\nexport const lists: Lists = {\n    User: list({\n        access: allowAll,\n        fields: {\n            name: text({ validation: { isRequired: true } }),\n            ssoId: text({\n                validation: { isRequired: false },\n                isIndexed: \"unique\",\n            }),\n            email: text({\n                validation: { isRequired: true },\n                isIndexed: \"unique\",\n            }),\n\n            // \"checkbox\" is keystone's weird way of saying \"boolean field\"\n            admin: checkbox({\n                defaultValue: false,\n            }),\n        },\n    }),\n};\n"],
  "mappings": "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",
  "names": ["import_core", "import_express", "bodyParser"]
}
